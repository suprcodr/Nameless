//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nameless.Skeleton.Framework.EventSourcing.Resources {
    using System;
    using System.Reflection;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resource {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resource() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Nameless.Skeleton.Framework.EventSourcing.Resources.Resource", typeof(Resource).GetTypeInfo().Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to INSERT INTO [events] (
        ///    [event_id],
        ///    [aggregate_id],
        ///    [version],
        ///    [time_stamp],
        ///    [event_type],
        ///    [payload]
        ///) VALUES (
        ///    @ID,
        ///    @AggregateID,
        ///    @Version,
        ///    @TimeStamp,
        ///    @EventType,
        ///    @Payload
        ///).
        /// </summary>
        internal static string CreateEvent {
            get {
                return ResourceManager.GetString("CreateEvent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF EXISTS(SELECT [name] FROM sys.tables WHERE [name] = &apos;events&apos;)
        ///    DROP TABLE [events]
        ///
        ///IF EXISTS(SELECT [name] FROM sys.tables WHERE [name] = &apos;snapshots&apos;)
        ///    DROP TABLE [snapshots]
        ///
        ///CREATE TABLE [events] (
        ///    [event_id]      UNIQUEIDENTIFIER    NOT NULL,
        ///    [aggregate_id]  UNIQUEIDENTIFIER    NOT NULL,
        ///    [version]       INT                 NOT NULL,
        ///    [time_stamp]    DATETIME            NOT NULL,
        ///    [event_type]    NVARCHAR(256)       NOT NULL,
        ///    [payload]       VARBINARY(MAX)       [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CreateSchema {
            get {
                return ResourceManager.GetString("CreateSchema", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to INSERT INTO [snapshots] (
        ///    [snapshot_id],
        ///    [aggregate_id],
        ///    [version],
        ///    [snapshot_type],
        ///    [payload]
        ///) VALUES (
        ///    @ID,
        ///    @AggregateID,
        ///    @Version,
        ///    @SnapshotType,
        ///    @Payload
        ///).
        /// </summary>
        internal static string CreateSnapshot {
            get {
                return ResourceManager.GetString("CreateSnapshot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT
        ///    [snapshot_id],
        ///    [aggregate_id],
        ///    [version],
        ///    [snapshot_type],
        ///    [payload]
        ///FROM [snapshots] (NOLOCK)
        ///WHERE [snapshot_id] = @ID.
        /// </summary>
        internal static string GetSnapshot {
            get {
                return ResourceManager.GetString("GetSnapshot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT
        ///    [event_id],
        ///    [aggregate_id],
        ///    [version],
        ///    [time_stamp],
        ///    [event_type],
        ///    [payload]
        ///FROM [events] (NOLOCK)
        ///WHERE [aggregate_id] = @AggregateID AND [version] &gt;= @Version.
        /// </summary>
        internal static string ListEvents {
            get {
                return ResourceManager.GetString("ListEvents", resourceCulture);
            }
        }
    }
}
